from aiogram import Router, F
from aiogram.filters import Command, invert_f, StateFilter
from aiogram.types import Message

from models import User
from repositories import ContactRepository, UserRepository
from repositories import HTTPClientFactory
from services import (
    get_or_create_user,
    can_create_new_contact
)

__all__ = ('register_handlers',)


async def on_contact_command_is_not_replied_to_user(
        message: Message,
) -> None:
    await message.reply(
        '–í—ã –¥–æ–ª–∂–Ω—ã <b><u>–æ—Ç–≤–µ—Ç–∏—Ç—å</u></b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
        '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: <a href="https://graph.org/Kak-dobavit'
        '-polzovatelya-v-kontakty-08-14">*—Å—Å—ã–ª–∫–∞*</a>'
    )


async def on_add_contact(
        message: Message,
        closing_http_client_factory: HTTPClientFactory,
        user: User,
) -> None:
    reply = message.reply_to_message
    if reply.from_user.is_bot:
        await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã')
        return

    if message.from_user.id == reply.from_user.id:
        await message.reply('–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —Å–≤–æ–∏ –∂–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã? ü§≠')
        return

    name = reply.from_user.username or reply.from_user.full_name

    async with closing_http_client_factory() as http_client:
        user_repository = UserRepository(http_client)
        contact_repository = ContactRepository(http_client)

        to_user, is_to_user_created = await get_or_create_user(
            user_repository=user_repository,
            user_id=reply.from_user.id,
            fullname=reply.from_user.full_name,
            username=reply.from_user.username,
        )

        if not to_user.can_be_added_to_contacts:
            await message.reply(
                'üòî –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ–±–∞–≤–ª—è—Ç—å —Å–µ–±—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
            )
            return

        contacts = await contact_repository.get_by_user_id(message.from_user.id)
        if not can_create_new_contact(
                contacts_count=len(contacts),
                is_premium=user.is_premium,
        ):
            await message.reply(
                'ü§≠ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –±–æ–ª—å—à–µ 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞ —Ä–∞–∑.'
                '\n–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ª–∏–º–∏—Ç,'
                ' –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 50 —Å–æ–º–æ–≤/–º–µ—Å—è—Ü'
            )
            return

        await contact_repository.create(
            of_user_id=user.id,
            to_user_id=to_user.id,
            private_name=name,
            public_name=name,
        )
        await message.reply('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')


def register_handlers(router: Router) -> None:
    router.message.register(
        on_contact_command_is_not_replied_to_user,
        Command('contact'),
        invert_f(F.reply_to_message),
        StateFilter('*'),
    )
    router.message.register(
        on_add_contact,
        Command('contact'),
        F.reply_to_message,
        StateFilter('*'),
    )
