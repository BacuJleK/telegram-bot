from collections.abc import Iterable

from aiogram.types import InputMediaPhoto

from enums import Course, Gender
from models import ManasId
from services.dates import compute_age
from services.manas_id import (
    humanize_personality_type,
    determine_zodiac_sign,
    compute_living_days,
)
from views import MediaGroupView

__all__ = ('ManasIdView',)


class ManasIdView(MediaGroupView):

    def __init__(self, manas_id: ManasId, photos: Iterable[str]):
        self.__manas_id = manas_id
        self.__photos = tuple(photos)

    def get_caption(self) -> str:
        course_name = {
            Course.BACHELOR_FIRST: '1 –±–∞–∫–∞–ª–∞–≤—Ä',
            Course.BACHELOR_SECOND: '2 –±–∞–∫–∞–ª–∞–≤—Ä',
            Course.BACHELOR_THIRD: '3 –±–∞–∫–∞–ª–∞–≤—Ä',
            Course.BACHELOR_FOURTH: '4 –±–∞–∫–∞–ª–∞–≤—Ä',
            Course.PREPARATION: '—Ö–∞–∑—ã—Ä–ª—ã–∫',
            Course.APPLICANT: '–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç',
        }[self.__manas_id.course]
        gender_name = {
            Gender.MALE: '–º—É–∂—Å–∫–æ–π',
            Gender.FEMALE: '–∂–µ–Ω—Å–∫–∏–π',
        }[self.__manas_id.gender]

        age = compute_age(self.__manas_id.born_at)
        if 4 >= age % 10 >= 1 != age // 10:
            age_suffix = '–≥–æ–¥–∞'
        else:
            age_suffix = '–ª–µ—Ç'

        personality_type = humanize_personality_type(
            personality_type=self.__manas_id.personality_type,
        )
        zodiac_sign = determine_zodiac_sign(
            month=self.__manas_id.born_at.month,
            day=self.__manas_id.born_at.day,
        )
        full_name = f'{self.__manas_id.last_name} {self.__manas_id.first_name}'
        if self.__manas_id.patronymic is not None:
            full_name = f'{full_name} {self.__manas_id.patronymic}'

        country = self.__manas_id.country or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        region = self.__manas_id.region or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        nationality = self.__manas_id.nationality or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'

        living_days = compute_living_days(self.__manas_id.born_at)

        lines = [
            '<b>ü™™ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞</b>\n',
            '<b>üì≤ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>',
            f'–§–ò–û: {full_name}',
            f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {self.__manas_id.born_at:%d.%m.%Y}',
            f'–í–æ–∑—Ä–∞—Å—Ç: {compute_age(self.__manas_id.born_at)} {age_suffix}',
            f'–ñ–∏–≤—ë—Ç –Ω–∞ –ó–µ–º–ª–µ: {living_days} –¥–Ω–µ–π',
            f'–ü–æ–ª: {gender_name}',
            f'–°—Ç—Ä–∞–Ω–∞: {country}',
            f'–†–µ–≥–∏–æ–Ω: {region}',
            f'–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}',
            '\n'
            f'<b>üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:</b>',
            f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {self.__manas_id.department.name}',
            f'–ö—É—Ä—Å: {course_name}\n',
            f'<b>‚òÅÔ∏è –°–∏—Å—Ç–µ–º–∞:</b>',
            f'ID –Ω–æ–º–µ—Ä: {self.__manas_id.document_number}',
            f'–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {self.__manas_id.created_at:%d.%m.%Y}\n',
            f'<b>‚úèÔ∏è –ü—Ä–æ—á–µ–µ:</b>',
            f'–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {personality_type}',
            f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac_sign}',
        ]

        if self.__manas_id.extra_preferences:
            lines.append('\n<b>‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>')
            for preference in self.__manas_id.extra_preferences:
                lines.append(f'{preference.name}: {preference.value}')

        return '\n'.join(lines)

    def get_medias(self) -> list[InputMediaPhoto]:
        return [
            InputMediaPhoto(media=photo_file_id)
            for photo_file_id in self.__photos
        ]
