from aiogram import Router
from aiogram.filters import StateFilter, Command
from aiogram.types import Message

from filters import (
    bet_on_even_or_odd_number_filter,
    bet_on_specific_number_filter,
    bet_on_specific_color_filter,
    bet_amount_filter,
)
from models import BetColor, User, BetEvenOrOdd
from repositories import BalanceRepository
from services import BalanceNotifier
from services.casino import get_roulette_with_random_number

router = Router(name=__name__)

__all__ = ('router',)


@router.message(
    Command('bet'),
    bet_on_specific_color_filter,
    bet_amount_filter,
    StateFilter('*'),
)
async def on_make_bet_on_specific_color(
        message: Message,
        target_color: BetColor,
        bet_amount: int,
        balance_repository: BalanceRepository,
        user: User,
        balance_notifier: BalanceNotifier,
) -> None:
    roulette = get_roulette_with_random_number()

    user_balance = await balance_repository.get_user_balance(user.id)

    if user_balance.balance < bet_amount:
        await message.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏')
        return

    if target_color == BetColor.GREEN and roulette.is_zero():
        await message.reply('–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ 0, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–∞–º')

    if target_color == roulette.determine_color():
        await message.reply('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
        deposit = await balance_repository.create_deposit(
            user_id=user.id,
            amount=bet_amount,
            description='–í—ã–∏–≥—Ä—ã—à –≤ –∫–∞–∑–∏–Ω–æ',
        )
        await balance_notifier.send_deposit_notification(deposit)
    else:
        await message.reply('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
        withdrawal = await balance_repository.create_withdrawal(
            user_id=user.id,
            amount=bet_amount,
            description='–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –∫–∞–∑–∏–Ω–æ',
        )
        await balance_notifier.send_withdrawal_notification(withdrawal)


@router.message(
    Command('bet'),
    bet_on_specific_number_filter,
    bet_amount_filter,
    StateFilter('*'),
)
async def on_make_bet_on_specific_number(
        message: Message,
        target_number: int,
        bet_amount: int,
        balance_repository: BalanceRepository,
        user: User,
        balance_notifier: BalanceNotifier,
) -> None:
    roulette = get_roulette_with_random_number()

    user_balance = await balance_repository.get_user_balance(user.id)

    if user_balance.balance < bet_amount:
        await message.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏')
        return

    if target_number == roulette.number and roulette.is_zero():
        await message.reply('–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ 0, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–∞–º')
        return

    if target_number == roulette.number:
        await message.reply(f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {roulette.number}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
        deposit = await balance_repository.create_deposit(
            user_id=user.id,
            amount=bet_amount * 50,
            description='–í—ã–∏–≥—Ä—ã—à –≤ –∫–∞–∑–∏–Ω–æ',
        )
        await balance_notifier.send_deposit_notification(deposit)
    else:
        await message.reply(f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {roulette.number}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
        withdrawal = await balance_repository.create_withdrawal(
            user_id=user.id,
            amount=bet_amount,
            description='–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –∫–∞–∑–∏–Ω–æ',
        )
        await balance_notifier.send_withdrawal_notification(withdrawal)


@router.message(
    Command('bet'),
    bet_on_even_or_odd_number_filter,
    bet_amount_filter,
    StateFilter('*'),
)
async def on_make_bet_on_even_or_odd_number(
        message: Message,
        target_even_or_odd: BetEvenOrOdd,
        bet_amount: int,
        balance_repository: BalanceRepository,
        user: User,
        balance_notifier: BalanceNotifier,
) -> None:
    roulette = get_roulette_with_random_number()

    user_balance = await balance_repository.get_user_balance(user.id)

    if user_balance.balance < bet_amount:
        await message.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏')
        return

    result_even_or_odd = roulette.determine_even_or_odd()
    if result_even_or_odd == target_even_or_odd and roulette.is_zero():
        await message.reply('–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ 0, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–∞–º')
        return

    if target_even_or_odd == roulette.determine_even_or_odd():
        await message.reply(f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {roulette.number}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
        deposit = await balance_repository.create_deposit(
            user_id=user.id,
            amount=bet_amount,
            description='–í—ã–∏–≥—Ä—ã—à –≤ –∫–∞–∑–∏–Ω–æ',
        )
        await balance_notifier.send_deposit_notification(deposit)
    else:
        await message.reply(f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {roulette.number}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
        withdrawal = await balance_repository.create_withdrawal(
            user_id=user.id,
            amount=bet_amount,
            description='–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –∫–∞–∑–∏–Ω–æ',
        )
        await balance_notifier.send_withdrawal_notification(withdrawal)


@router.message(
    Command('bet'),
    StateFilter('*'),
)
async def on_bet(
        message: Message,
) -> None:
    await message.reply(
        'üé≤ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:'
        '\n\n'
        'üé® <b>1. –ü–æ —Ü–≤–µ—Ç—É</b>'
        '\n'
        '<code>/bet {red –∏–ª–∏ black} {—Å—É–º–º–∞}</code>'
        '\n'
        '–í—ã–∏–≥—Ä—ã—à: 2x'
        '\n\n'
        'üî¢ <b>2. –ù–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ</b>'
        '\n'
        '<code>/bet {—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36} {—Å—É–º–º–∞}</code>'
        '\n'
        '–í—ã–∏–≥—Ä—ã—à: 50x'
        '\n\n'
        '‚öñÔ∏è <b>3. –ù–∞ —á–µ—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ</b>'
        '\n'
        '<code>/bet {even –∏–ª–∏ odd} {—Å—É–º–º–∞}</code>'
        '\n'
        '–í—ã–∏–≥—Ä—ã—à: 2x'
        '\n\n'
        '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000 –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤'
    )
